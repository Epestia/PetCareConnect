{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.isLoggedIn = false;\n  }\n  login(username, password) {\n    // Mettez en œuvre ici la logique d'authentification\n    // (par exemple, vérification d'un backend, etc.)\n    // Pour cet exemple, on considère que l'authentification réussit toujours.\n    this.isLoggedIn = true;\n    return this.isLoggedIn;\n  }\n  logout() {\n    this.isLoggedIn = false;\n  }\n  isAuthenticated() {\n    return this.isLoggedIn;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","isLoggedIn","login","username","password","logout","isAuthenticated","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Giovanni\\Desktop\\Petcare-connect\\src\\app\\_services\\auth.service.ts"],"sourcesContent":["// auth.service.ts\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private isLoggedIn: boolean = false;\r\n\r\n  login(username: string, password: string): boolean {\r\n    // Mettez en œuvre ici la logique d'authentification\r\n    // (par exemple, vérification d'un backend, etc.)\r\n    // Pour cet exemple, on considère que l'authentification réussit toujours.\r\n    this.isLoggedIn = true;\r\n    return this.isLoggedIn;\r\n  }\r\n\r\n  logout(): void {\r\n    this.isLoggedIn = false;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.isLoggedIn;\r\n  }\r\n}\r\n"],"mappings":";AAMA,OAAM,MAAOA,WAAW;EAHxBC,YAAA;IAIU,KAAAC,UAAU,GAAY,KAAK;;EAEnCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC;IACA;IACA;IACA,IAAI,CAACH,UAAU,GAAG,IAAI;IACtB,OAAO,IAAI,CAACA,UAAU;EACxB;EAEAI,MAAMA,CAAA;IACJ,IAAI,CAACJ,UAAU,GAAG,KAAK;EACzB;EAEAK,eAAeA,CAAA;IACb,OAAO,IAAI,CAACL,UAAU;EACxB;EAAC,QAAAM,CAAA,G;qBAjBUR,WAAW;EAAA;EAAA,QAAAS,EAAA,G;WAAXT,WAAW;IAAAU,OAAA,EAAXV,WAAW,CAAAW,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}